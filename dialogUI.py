# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialogUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import random
import threading
import os
import time
from gameControler import gameWithGUI
from manualAgent import manualAgent
from randomAgent import randomAgent
from minimaxAgent import minimaxAgent
from RL_play import reinforceAgent

leftUp=[(161,110),(161,190),(161,266),(161,350),(161,429),(161,506),(17,592),(17,506),(17,429),(17,350),(17,266),(17,190),(17,110),(17,35)]
width=65
height1=208
height2=90

class myThread(threading.Thread):
    def __init__(self,game,action):
        threading.Thread.__init__(self)
        self.game=game
        self.action=action

    def run(self):
        if self.action==-1:
            self.game.play()
        else:
            self.game.manPlay(self.action)



class newLabel(QtWidgets.QLabel):
    def __init__(self,Dialog,UI,id):
        super().__init__(Dialog)
        self.parentUI=UI
        self.enable=False
        self.id=id

    def enableAction(self,enable):
        self.enable=enable

    def mousePressEvent(self, event):
        if self.enable:
            if event.buttons () == QtCore.Qt.LeftButton:
                self.parentUI.play(self.id)
                    
                            
                

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1064, 355)
        Dialog.setMinimumSize(QtCore.QSize(1064, 355))
        Dialog.setMaximumSize(QtCore.QSize(1064, 355))
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(380, 30, 658, 300))
        self.label.setObjectName("label")
        self.winningLabel = QtWidgets.QLabel(Dialog)
        self.winningLabel.setGeometry(QtCore.QRect(565, 130, 300, 100))
        self.winningLabel.setObjectName("winningLabel")
        self.startWith1Button = QtWidgets.QPushButton(Dialog)
        self.startWith1Button.setGeometry(QtCore.QRect(10, 20, 181, 61))
        self.startWith1Button.setObjectName("startWith1Button")
        self.startWith2Button = QtWidgets.QPushButton(Dialog)
        self.startWith2Button.setGeometry(QtCore.QRect(190, 20, 181, 61))
        self.startWith2Button.setObjectName("startWith2Button")
        self.startWith2Button_2 = QtWidgets.QPushButton(Dialog)
        self.startWith2Button_2.setGeometry(QtCore.QRect(100, 270, 181, 61))
        self.startWith2Button_2.setObjectName("startWith2Button_2")
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(10, 80, 181, 181))
        self.groupBox.setObjectName("groupBox")
        self.P1random = QtWidgets.QRadioButton(self.groupBox)
        self.P1random.setGeometry(QtCore.QRect(20, 50, 100, 20))
        self.P1random.setChecked(True)
        self.P1random.setObjectName("P1random")
        self.buttonGroup = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.P1random)
        self.P1minimax = QtWidgets.QRadioButton(self.groupBox)
        self.P1minimax.setGeometry(QtCore.QRect(20, 80, 100, 20))
        self.P1minimax.setChecked(False)
        self.P1minimax.setObjectName("P1minimax")
        self.buttonGroup.addButton(self.P1minimax)
        self.P1RL = QtWidgets.QRadioButton(self.groupBox)
        self.P1RL.setGeometry(QtCore.QRect(20, 110, 141, 20))
        self.P1RL.setObjectName("P1RL")
        self.buttonGroup.addButton(self.P1RL)
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(190, 80, 181, 181))
        self.groupBox_2.setObjectName("groupBox_2")
        self.P1RL_2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.P1RL_2.setGeometry(QtCore.QRect(20, 110, 141, 20))
        self.P1RL_2.setObjectName("P1RL_2")
        self.buttonGroup_2 = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup_2.setObjectName("buttonGroup_2")
        self.buttonGroup_2.addButton(self.P1RL_2)
        self.P1random_2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.P1random_2.setGeometry(QtCore.QRect(20, 50, 100, 20))
        self.P1random_2.setChecked(True)
        self.P1random_2.setObjectName("P1random_2")
        self.buttonGroup_2.addButton(self.P1random_2)
        self.P1minimax_2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.P1minimax_2.setGeometry(QtCore.QRect(20, 80, 100, 20))
        self.P1minimax_2.setObjectName("P1minimax_2")
        self.buttonGroup_2.addButton(self.P1minimax_2)

        self.startWith2Button_2.clicked.connect(self.versus)
        self.startWith1Button.clicked.connect(self.p1Start)
        self.startWith2Button.clicked.connect(self.p2Start)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        plate = QtGui.QPixmap("plate.png").scaled(self.label.width(), self.label.height())
        self.label.setPixmap(plate)

        self.winningLabel.hide()
        self.winningLabel.setStyleSheet("font: bold; font-size:48px; color: rgb(255, 0, 0)")
        self.numLabels=[]

        self.cmdG=[[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
        self.cmds=[]
        for j in range(14):
            if (j==6) or (j==13):
                continue
            for i in range(4):
                label2 = QtWidgets.QLabel(Dialog)
                label2.setGeometry(QtCore.QRect(380, 20, 50, 50))
                if i==0:
                    label2.setPixmap(QtGui.QPixmap("commander.png").scaled(label2.width(), label2.height()))
                if i==1:
                    label2.setPixmap(QtGui.QPixmap("commander2.png").scaled(label2.width(), label2.height()))
                if i==2:
                    label2.setPixmap(QtGui.QPixmap("commander3.png").scaled(label2.width(), label2.height()))
                if i==3:
                    label2.setPixmap(QtGui.QPixmap("commander4.png").scaled(label2.width(), label2.height()))
                self.cmdG[j].append(label2)
                self.cmds.append(label2)
        
        for i in range(14):
            if i<7:
                label2 = newLabel(Dialog,self,i)
            else:
                label2 = newLabel(Dialog,self,i-7)
            label2.setGeometry(QtCore.QRect(370+leftUp[i][1]-10,30+leftUp[i][0]-5 , 30, 20))
            pe = QtGui.QPalette()
            pe.setColor(QtGui.QPalette.WindowText,QtCore.Qt.white)
            label2.setPalette(pe)
            ft=QtGui.QFont()
            ft.setBold(True)
            ft.setPointSize(24)
            label2.setFont(ft)
            label2.setText(str(len(self.cmdG[i])))
            self.numLabels.append(label2)

        self.paintInit()

        self.firstTurn=True

        

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Mancala"))
        self.label.setText(_translate("Dialog", "TextLabel"))
        self.startWith1Button.setText(_translate("Dialog", "Start a game using P1"))
        self.startWith2Button.setText(_translate("Dialog", "Start a game using P2"))
        self.startWith2Button_2.setText(_translate("Dialog", "AIs against each other"))
        self.groupBox.setTitle(_translate("Dialog", "P1 AI Settings:"))
        self.P1random.setText(_translate("Dialog", "Random"))
        self.P1minimax.setText(_translate("Dialog", "Minimax"))
        self.P1RL.setText(_translate("Dialog", "Reinforce Learning"))
        self.groupBox_2.setTitle(_translate("Dialog", "P2 AI Settings:"))
        self.P1RL_2.setText(_translate("Dialog", "Reinforce Learning"))
        self.P1random_2.setText(_translate("Dialog", "Random"))
        self.P1minimax_2.setText(_translate("Dialog", "Minimax"))

    

    def generatePosition(self,target):
        base=(340,0)
        commanderSize=(50,50)
        minx=base[0]+leftUp[target][1]+commanderSize[1]/2
        maxx=base[0]+leftUp[target][1]-commanderSize[1]/2+int(width*1.3)
        miny=base[1]+leftUp[target][0]+commanderSize[0]/2
        if (target==6) or (target==13):
            maxy=base[1]+leftUp[target][0]-commanderSize[0]/2+int(height1*1.3)
        else:
            maxy=base[1]+leftUp[target][0]-commanderSize[0]/2+int(height2*1.3)
        posx=random.randrange(minx,maxx+1,20)
        posy=random.randrange(miny,maxy+1,5)
        return (posy,posx)

    def paintInit(self):
        self.winningLabel.hide()
        for j in range(14):
            for i in range(len(self.cmdG[j])):
                posy,posx=self.generatePosition(j)
                self.cmdG[j][i].setGeometry(QtCore.QRect(posx, posy,50,50))
                self.cmdG[j][i].update()
        for i in range(14):
            self.numLabels[i].setText(str(len(self.cmdG[i])))
            self.numLabels[i].update()
    
    def colorRollBack(self):
        pe = QtGui.QPalette()
        pe.setColor(QtGui.QPalette.WindowText,QtCore.Qt.white)
        for i in range(14):
            self.numLabels[i].setPalette(pe)

    def paintMove(self,start,end,num):
        #self.colorRollBack()
        #pe = QtGui.QPalette()
        for i in range(num):
            label=self.cmdG[start].pop()
            print("paintMove1")
            posy,posx=self.generatePosition(end)
            print("paintMove2")
            label.setGeometry(QtCore.QRect(posx, posy, 50, 50))
            print("paintMove3")
            self.cmdG[end].append(label)
            print("paintMove4")
            self.numLabels[start].setText(str(len(self.cmdG[start])))
            print("paintMove5")
            #pe.setColor(QtGui.QPalette.WindowText,QtCore.Qt.red)
            #self.numLabels[start].setPalette(pe)
            self.numLabels[start].update()
            print("paintMove6")
            self.numLabels[end].setText(str(len(self.cmdG[end])))
            print("paintMove7")
            #pe.setColor(QtGui.QPalette.WindowText,QtCore.Qt.green)
            #self.numLabels[end].setPalette(pe)
            self.numLabels[end].update()
            print("paintMove8")
            self.label.update()
            print("paintMove9")

    def paintWinning(self,judge):
        _translate = QtCore.QCoreApplication.translate
        self.winningLabel.setText(_translate("Dialog", judge))
        self.winningLabel.setGeometry(QtCore.QRect(589, 110, 300, 100))
        self.winningLabel.setVisible(True)
        self.winningLabel.update()

    def getAgents(self):
        agent1=None
        agent2=None
        if self.P1random.isChecked():
            agent1=randomAgent()
        elif self.P1minimax.isChecked():
            agent1=minimaxAgent()
        else:
            agent1=reinforceAgent()
        if self.P1random_2.isChecked():
            agent2=randomAgent()
        elif self.P1minimax_2.isChecked():
            agent2=minimaxAgent()
        else:
            agent2=reinforceAgent()
        return agent1,agent2

    def play(self,action):
        self.thread=myThread(self.agame,action)
        self.thread.start()

    def uiInit(self):
        self.startWith1Button.setDisabled(True)
        self.startWith1Button.update()
        self.startWith2Button.setDisabled(True)
        self.startWith2Button.update()
        self.startWith2Button_2.setDisabled(True)
        self.startWith2Button_2.update()
        if not self.firstTurn:
            self.cmdG=[[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
            k=0
            for j in range(14):
                if (j==6) or (j==13):
                    continue
                for i in range(4):
                    self.cmdG[j].append(self.cmds[k])
                    k+=1
            self.paintInit()
        else:
            self.firstTurn=False
    
    def uiTerminal(self,judge):
        self.paintWinning(judge)
        self.startWith1Button.setEnabled(True)
        self.startWith1Button.update()
        self.startWith2Button.setEnabled(True)
        self.startWith2Button.update()
        self.startWith2Button_2.setEnabled(True)
        self.startWith2Button_2.update()

    def versus(self):
        agent1,agent2=self.getAgents()
        self.agame=gameWithGUI(agent1,agent2,self)
        self.uiInit()
        self.play(-1)

    def p1Start(self):
        self.player=True
        agent1,agent2=self.getAgents()
        self.agame=gameWithGUI(None,agent2,self)
        self.uiInit()
        self.play(-1)
    
    def p2Start(self):
        self.player=False
        agent1,agent2=self.getAgents()
        self.agame=gameWithGUI(agent1,None,self)
        self.uiInit()
        self.play(-1)
    
    def enableManualAction(self,state):
        if state:
            for i in range(0,6):
                self.numLabels[i].enableAction(True)
        else:
            for i in range(7,13):
                self.numLabels[i].enableAction(True)
    
    def disableManualAction(self,state):
        if state:
            for i in range(0,6):
                self.numLabels[i].enableAction(False)
        else:
            for i in range(7,13):
                self.numLabels[i].enableAction(False)